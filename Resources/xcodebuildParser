#!/usr/bin/perl -w
###############################################################################
#	Copyright 2012 BITart Gerd Knops,  All rights reserved.
#
#	Project	: ApLo (BITart)
#	File	: xcodebuildParser
#	Author	: Gerd Knops gerti@BITart.com
#
###############################################################################
#
#	History:
#	120107 Creation of file
#
###############################################################################
#
#	Description:
#	«»
#
###############################################################################
#
# DISCLAIMER
#
# BITart and Gerd Knops make no warranties, representations or commitments
# with regard to the contents of this software. BITart and Gerd Knops
# specifically disclaim any and all warranties, whether express, implied or
# statutory, including, but not limited to, any warranty of merchantability
# or fitness for a particular purpose, and non-infringement. Under no
# circumstances will BITart or Gerd Knops be liable for loss of data,
# special, incidental or consequential damages out of the use of this
# software, even if those damages were foreseeable, or BITart or Gerd Knops
# was informed of their potential.
#
###############################################################################
# Configuration
###############################################################################
	
	use strict;
	
	#
	# Note: optionally keyword values are preceded by one or more option flags,
	# separated from the value with a pipe ('|') symbol. The keywords are:
	# 
	# - any digit n: use the nth argument as path to display (default: 1).
	# - Xn: the nth argument is the path of the executable.
	# 
	our %KeyWords=(
		'Clean.Remove'			=> '2|Cleaning',
		ProcessInfoPlistFile	=> 'Processing Info.plist',
		ProcessPCH				=> '2|Precompiling header',
		CompileC				=> '2|Compiling',
		Ld						=> 'X1|Linking',
		CopyStringsFile			=> 'Copy strings',
		CpResource				=> 'Copy resource',
		CompileXIB				=> 'Compiling XIB',
		Touch					=> 'Touching',
	);
	
	our $Executable='';	
	our $MainClass='xcodebuild';
	
	our $IDCounter='levelID00000';	
	
###############################################################################
# Main
###############################################################################
	
	our $level=NestedLevel->new();
	
	our @XCBArgs=qw(
		-scheme	ApLo
		build
	);
	
	# open(IN,'-|',"xcodebuild",@XCBArgs) or die("Can't open 'xcodebuild' for read: $!\n");
	open(IN,'/tmp/build.log') or die("Can't open 'xcodebuild' for read: $!\n");
	while(<IN>)
	{
		chomp();
		next if(/^\s*$/);
		if(/^\s+/)
		{
			$level->emitLine($_);
		}
		elsif(/^===\s*(.+)\s*===$/)
		{
			my $txt=$1;
			my $hidden=($txt=~/^clean/i)?1:0;
			
			$level=$level->popTo(0);
			$level=$level->newChild($hidden,'',$txt);
		}
		elsif(/^\*\*\s*(.+)\s*\*\*/)
		{
			my $txt=$1;
			
			$level=$level->popTo(1);
			$level=$level->addResult($txt);
		}
		elsif(/^\S+:\s*(warning|error):/)
		{
			$level=$level->popTo(1);
			$level=$level->addWarningOrErrorLevel(lc($1),$_);
		}
		elsif(s/^(\S+)\s*//)
		{
			if(exists($KeyWords{$1}))
			{
				$level=$level->popTo(1);
				$level=$level->newSubSection($1,$_);
			}
			else
			{
				$level->emitLine("$1 $_");
			}
		}		
	}
	close(IN);
	
	$level=$level->popTo(0);
	

###############################################################################
# Subroutines
###############################################################################


###############################################################################
package NestedLevel;
###############################################################################
sub new {
	
	my $class=shift;
	
	my $self=bless({},$class);
	
	$self->{cssClasses}=[];
	$self->{level}=0;
	
	$self->{id}=$IDCounter++;
	
	$self;
}
sub newChild {
	
	my $self=shift;
	my $hidden=shift;
	my $prefix=shift // '';
	my $msg=shift // '';
	my @extraClasses=@_;
	
	my $class=ref($self) || $self;
	
	my $child=$class->new();
	
	$child->{parent}=$self;
	$child->{level}=$self->{level}+1;
	$child->{hidden}=$hidden;
	
	my $line=$child->toggleButton($hidden);
	
	if($prefix ne '')
	{
		$line.=qq{<span class="levelPrefix">$prefix</span> };
	}
	
	$line.=qq{<span class="levelMsg">$msg</span>};
	
	$self->emitLine($line,@extraClasses);
	
	$child;
}
sub addClasses {
	
	my $self=shift;
	
	push(@{$self->{cssClasses}},@_);
}
sub emitLine {
	
	my $self=shift;
	my $line=shift;
	my @extraClasses=@_;
	
	my $txt=$self->divStartText(@extraClasses).$line.$self->divEndText();
	
	print $txt;
}
sub divStartText {
	
	my $self=shift;
	my @extraClasses=@_;
	
	my @classes=();
	push(@classes,$::MainClass) if($::MainClass);
	push(@classes,"indent$self->{level}");
	push(@classes,@{$self->{cssClasses}});
	push(@classes,@extraClasses);
	
	my $classes=join(' ',@classes);
	
	qq{<div class="$classes" name="$self->{id}">};
}
sub divEndText {
	
	qq{</div>\n};
}
sub popTo {
	
	my $o=shift;
	my $l=shift;
	
	while($o->{level}>$l)
	{
		if($o->{hidden})
		{
			print qq{<script type="text/javascript">toggleVisibilityOfElementsNamed('$o->{id}');</script>\n};
		}
		$o=$o->{parent};
	}
	
	$o;
}
sub toggleButton {
	
	my $self=shift;
	my $hidden=shift;
	
	my $id=$self->{id};
	my $buttonTxt=($hidden)?'▶':'▼';
	
	my $txt=qq{<button type="button" class="levelToggle" onclick="toggleLevel(this,'$id')">$buttonTxt</button>};
	
	# if($hidden)
	# {
	# 	$txt.=qq{<script type="text/javascript">toggleLevel(null,'$id');</script>};
	# }
	
	$txt;
}
sub addResult {
	
	my $self=shift;
	my $txt=shift;
	
	my $success=($txt=~/failed/i)?'error':'ok';
	
	my $child=$self->newChild(1,'',$txt,"${success}Header");
	
	$child->addClasses("${success}Line");
	
	$child;
}
sub addWarningOrErrorLevel {
	
	my $self=shift;
	my $type=shift;
	my $line=shift;
	
	my $child=$self->newChild(0,'',$type,"${type}LevelHeader");
	
	$child->addClasses("${type}Level");
	$child->addClasses('monospaced');
	$child->appendLineWithLink($line);
	
	$child;
}
sub appendLineWithLink {
	
	my $self=shift;
	my $line=shift;
	
	my $html=$line;
	
	if($line=~s/^([^:]+):(\d+):((\d+)\:)?\s*//)
	{
		my $path=$1;
		my $lineNo=$2;
		my $column=$4 // undef;
		
		my $file=$path;
		$file=~s/.*\///;
		
		$path=$self->percentEscape($path);
		
		my $col='';
		
		if(defined($column))
		{
			$col=qq{&column=$column};
		}
		
		$html=qq{<a href="txmt://open/?url=file://$path&line=$lineNo$col">$file</a>: $line};
	}
	
	$self->emitLine($html);
	
	$self;
}
sub newSubSection {
	
	my $self=shift;
	my $keyWord=shift;
	my $text=shift;
	
	my $prefix=$keyWord;
	my $pathArgNo=1;
	my $execArgNo=0;
	my $pathToDisplay='';
	
	if(exists($KeyWords{$keyWord}))
	{
		my $kw=$KeyWords{$keyWord};
		if($kw=~s/(.+)\|//)
		{
			my $opts=$1;
			
			if($opts=~s/X(\d+)//)
			{
				$execArgNo=$1;
			}
			if($opts=~s/(\d+)//)
			{
				$pathArgNo=$1;
			}
			
			if($opts ne '')
			{
				warn("Keyword $kw has unrecognized option '$opts'\n");
			}
		}
		$prefix=$kw;
	}
	
	my $ex=$self->getPathFromArgs($execArgNo,$text);
	
	$Executable=$ex if($ex ne '');
	
	$pathToDisplay=$self->getPathFromArgs($pathArgNo,$text);
	$pathToDisplay=~s/.*\///;
	
	my $child=$self->newChild(1,$prefix,$pathToDisplay);
	
	$child->addClasses('compilerOutput');
	
	$child;
}
sub getPathFromArgs {
	
	my $self=shift;
	my $num=shift;
	my $s=shift;
	
	# print STDERR "$num: $s\n";
	
	return '' if($num<1);
	
	my @a=split(/\s/,$s);
	
	$a[$num-1] //'';
}
sub percentEscape {
	
	my $self=shift;
	my $s=shift;
	
	# $s=~s/([^a-zA-Z0-9_\-.\/])/uc sprintf("%%%02x",ord($1))/eg;
	$s=~s/(\s|[]\!\*\'\(\)\;\:\@\&\=\+\$\,\?\#\[\]])/uc sprintf("%%%02x",ord($1))/eg;
	
	$s;
}

1;
############################################################################EOF